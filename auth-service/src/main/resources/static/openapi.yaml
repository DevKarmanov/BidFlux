openapi: 3.0.3
info:
  title: Auth & User API
  version: 1.0.1
  description: API для аутентификации, управления пользователями и получения информации о пользователях.

tags:
  - name: Auth
    description: Аутентификация и регистрация пользователей
  - name: User
    description: Получение информации о пользователях

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Логин пользователя
      description: Аутентификация пользователя по username и password. Возвращает access и refresh токены.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Логин пользователя
                password:
                  type: string
                  description: Пароль пользователя
      parameters:
        - name: X-Device-Id
          in: header
          required: true
          schema:
            type: string
          description: Уникальный идентификатор устройства для выдачи refresh токена
      responses:
        '200':
          $ref: '#/components/responses/SuccessTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/registration:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      description: Создает нового пользователя с username и password.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Логин пользователя
                password:
                  type: string
                  description: Пароль пользователя
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Обновление access токена
      description: Возвращает новый access токен на основе refresh токена.
      operationId: refresh
      parameters:
        - name: X-Refresh-Token
          in: header
          required: true
          schema:
            type: string
          description: Refresh токен
      responses:
        '200':
          $ref: '#/components/responses/SuccessAccessToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/{username}:
    get:
      tags:
        - User
      summary: Получение информации о пользователе
      description: >
        Возвращает информацию о пользователе по имени. Можно запрашивать конкретные поля (`id`, `username`, `roles`).
        Если поля не указаны, возвращаются `id` и `username`. Требуется Bearer Token.
      operationId: getUserInfo
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Имя пользователя
        - name: fields
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - id
                - username
                - roles
          description: Поля, которые нужно вернуть
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/schemas/DynamicUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiError:
      type: object
      required:
        - status
        - error
        - message
        - path
        - timestamp
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed: username must not be empty"
        path:
          type: string
          example: "/auth/login"
        timestamp:
          type: string
          format: date-time
          example: "2025-08-30T14:40:00Z"

    AccessToken:
      type: object
      required:
        - accessToken
        - tokenType
        - expiresAt
      properties:
        accessToken:
          type: string
          description: JWT access токен
        tokenType:
          type: string
          description: Тип токена (обычно Bearer)
        expiresAt:
          type: integer
          description: Время жизни токена в секундах (например, 600)

    RefreshToken:
      type: object
      required:
        - jti
        - issuedAt
        - expiresAt
        - refreshToken
      properties:
        jti:
          type: string
          description: Уникальный идентификатор refresh токена
        issuedAt:
          type: string
          format: date-time
          description: Дата и время выдачи токена
        expiresAt:
          type: string
          format: date-time
          description: Дата и время окончания срока действия токена
        refreshToken:
          type: string
          description: Значение refresh токена

    DynamicUserResponse:
      type: object
      description: Возвращаемые поля могут быть динамическими, в зависимости от параметра `fields`.
      additionalProperties:
        description: Значение поля (id, username или roles)
      example:
        id: 123
        username: "user1"
        roles: [ "USER" ]

    Tokens:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          $ref: '#/components/schemas/AccessToken'
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'

  responses:
    BadRequest:
      description: Ошибка валидации запроса
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    Unauthorized:
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    NotFound:
      description: Сущность не найдена
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    Conflict:
      description: Конфликт при создании сущности
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'

    SuccessTokens:
      description: Успешная аутентификация
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tokens'

    SuccessAccessToken:
      description: Новый access токен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessToken'
